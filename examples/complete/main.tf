module "github" {
  for_each         = { for k, v in local.repositories : (try(v.alias, null) != null ? v.alias : k) => v }
  source           = "../../"
  deploy_keys_path = "./keys_pem"

  name                                   = each.key
  description                            = try(each.value.description, try(local.defaults.description, null))
  homepage                               = try(each.value.homepage, try(local.defaults.homepage, null))
  private                                = try(each.value.private, try(local.defaults.private, null))
  visibility                             = try(each.value.visibility, try(local.defaults.visibility, null))
  has_issues                             = try(each.value.has_issues, try(local.defaults.has_issues, null))
  has_downloads                          = try(each.value.has_downloads, try(local.defaults.has_downloads, null))
  has_projects                           = try(each.value.has_projects, try(local.defaults.has_projects, null))
  has_wiki                               = try(each.value.has_wiki, try(local.defaults.has_wiki, null))
  is_template                            = try(each.value.is_template, try(local.defaults.is_template, null))
  allow_merge_commit                     = try(each.value.allow_merge_commit, try(local.defaults.allow_merge_commit, null))
  allow_squash_merge                     = try(each.value.allow_squash_merge, try(local.defaults.allow_squash_merge, null))
  allow_rebase_merge                     = try(each.value.allow_rebase_merge, try(local.defaults.allow_rebase_merge, null))
  squash_merge_commit_title              = try(each.value.squash_merge_commit_title, try(local.defaults.squash_merge_commit_title, null))
  squash_merge_commit_message            = try(each.value.squash_merge_commit_message, try(local.defaults.squash_merge_commit_message, null))
  merge_commit_title                     = try(each.value.merge_commit_title, try(local.defaults.merge_commit_title, null))
  merge_commit_message                   = try(each.value.merge_commit_message, try(local.defaults.merge_commit_message, null))
  delete_branch_on_merge                 = try(each.value.delete_branch_on_merge, try(local.defaults.delete_branch_on_merge, null))
  web_commit_signoff_required            = try(each.value.web_commit_signoff_required, try(local.defaults.web_commit_signoff_required, null))
  auto_init                              = try(each.value.auto_init, try(local.defaults.auto_init, null))
  gitignore_template                     = try(each.value.gitignore_template, try(local.defaults.gitignore_template, null))
  license_template                       = try(each.value.license_template, try(local.defaults.license_template, null))
  default_branch                         = try(each.value.default_branch, try(local.defaults.default_branch, null))
  archived                               = try(each.value.archived, try(local.defaults.archived, null))
  archive_on_destroy                     = try(each.value.archive_on_destroy, try(local.defaults.archive_on_destroy, null))
  topics                                 = try(each.value.topics, try(local.defaults.topics, null))
  enable_vulnerability_alerts            = try(each.value.enable_vulnerability_alerts, try(local.defaults.vulnerability_alerts, null))
  allow_update_branch                    = try(each.value.allow_update_branch, try(local.defaults.allow_update_branch, null))
  pages                                  = try(each.value.pages, try(local.defaults.pages, null))
  enable_advanced_security               = try(each.value.enable_advanced_security, try(local.defaults.enable_advanced_security, null))
  enable_secret_scanning                 = try(each.value.enable_secret_scanning, try(local.defaults.enable_secret_scanning, null))
  enable_secret_scanning_push_protection = try(each.value.enable_secret_scanning_push_protection, try(local.defaults.enable_secret_scanning_push_protection, null))
  template                               = try(each.value.template, try(local.defaults.template, null))
  template_include_all_branches          = try(each.value.template_include_all_branches, try(local.defaults.template_include_all_branches, null))
  branches                               = try(each.value.branches, try(local.defaults.branches, null))
  dependabot_secrets                     = try(each.value.dependabot_secrets, try(local.defaults.dependabot_secrets, null))


  teams                = try(each.value.teams, try(local.defaults.teams, null))
  users                = try(each.value.users, try(local.defaults.users, null))
  rulesets             = try(each.value.rulesets, try(local.defaults.rulesets, null))
  issue_labels         = try(each.value.issue_labels, try(local.defaults.issue_labels, null))
  autolink_references  = try(each.value.autolink_references, try(local.defaults.autolink_references, null))
  webhooks             = try(each.value.webhooks, try(local.defaults.webhooks, null))
  deploy_keys          = try(each.value.deploy_keys, try(local.defaults.deploy_keys, null))
  files                = try(each.value.files, try(local.defaults.files, null))
  actions_access_level = try(each.value.actions_access_level, try(local.defaults.actions_access_level, null))
  actions_permissions  = try(each.value.actions_permissions, try(local.defaults.actions_permissions, null))
  secrets              = try(each.value.secrets, try(local.defaults.secrets, null))
  variables            = try(each.value.variables, try(local.defaults.variables, null))
  environments         = try(each.value.environments, try(local.defaults.environments, null))
  custom_properties    = try(each.value.custom_properties, try(local.defaults.custom_properties, null))
}
